const UNICORN_RULES = {
	'unicorn/better-regex': 'error',
	'unicorn/catch-error-name': ['error', { name: 'error' }],
	'unicorn/consistent-destructuring': 'error',
	'unicorn/consistent-function-scoping': ['error', { checkArrowFunctions: false }],
	'unicorn/custom-error-definition': 'error',
	'unicorn/empty-brace-spaces': 'error',
	'unicorn/error-message': 'error',
	'unicorn/escape-case': 'error',
	'unicorn/expiring-todo-comments': 'off',
	'unicorn/explicit-length-check': 'error',
	'unicorn/filename-case': ['error', { case: 'kebabCase' }],
	'unicorn/import-style': 'off',
	'unicorn/new-for-builtins': 'error',
	'unicorn/no-abusive-eslint-disable': 'error',
	'unicorn/no-array-callback-reference': 'error',
	'unicorn/no-array-for-each': 'off',
	'unicorn/no-array-method-this-argument': 'error',
	// The rule does not use information from types.
	'unicorn/no-array-push-push': 'off',
	'unicorn/no-array-reduce': 'off',
	'unicorn/no-await-expression-member': 'error',
	'unicorn/no-console-spaces': 'error',
	'unicorn/no-document-cookie': 'error',
	'unicorn/no-empty-file': 'error',
	'unicorn/no-for-loop': 'error',
	'unicorn/no-hex-escape': 'error',
	'unicorn/no-instanceof-array': 'error',
	'unicorn/no-invalid-remove-event-listener': 'error',
	'unicorn/no-keyword-prefix': 'off',
	'unicorn/no-lonely-if': 'error',
	// Available in ESLint without automatic fix.
	'unicorn/no-negated-condition': 'off',
	'unicorn/no-nested-ternary': 'error',
	'unicorn/no-new-array': 'error',
	'unicorn/no-new-buffer': 'error',
	// We need to try this rule in the future.
	'unicorn/no-null': 'off',
	'unicorn/no-object-as-default-parameter': 'error',
	'unicorn/no-process-exit': 'off',
	'unicorn/no-static-only-class': 'error',
	'unicorn/no-thenable': 'error',
	'unicorn/no-this-assignment': 'error',
	'unicorn/no-typeof-undefined': 'error',
	'unicorn/no-unnecessary-await': 'error',
	'unicorn/no-unreadable-array-destructuring': 'error',
	'unicorn/no-unreadable-iife': 'error',
	'unicorn/no-unused-properties': 'error',
	'unicorn/no-useless-fallback-in-spread': 'error',
	'unicorn/no-useless-length-check': 'error',
	'unicorn/no-useless-promise-resolve-reject': 'error',
	'unicorn/no-useless-spread': 'error',
	'unicorn/no-useless-undefined': 'off',
	'unicorn/no-zero-fractions': 'error',
	'unicorn/number-literal-case': 'error',
	'unicorn/numeric-separators-style': 'error',
	'unicorn/prefer-add-event-listener': 'error',
	'unicorn/prefer-array-find': 'error',
	'unicorn/prefer-array-flat': 'error',
	'unicorn/prefer-array-flat-map': 'error',
	'unicorn/prefer-array-index-of': 'error',
	'unicorn/prefer-array-some': 'error',
	// Available in node.js 16+
	'unicorn/prefer-at': 'off',
	'unicorn/prefer-blob-reading-methods': 'error',
	'unicorn/prefer-code-point': 'error',
	'unicorn/prefer-date-now': 'error',
	'unicorn/prefer-default-parameters': 'error',
	'unicorn/prefer-dom-node-append': 'error',
	'unicorn/prefer-dom-node-dataset': 'error',
	'unicorn/prefer-dom-node-remove': 'error',
	'unicorn/prefer-dom-node-text-content': 'error',
	// Available in node.js 16+
	'unicorn/prefer-event-target': 'off',
	'unicorn/prefer-export-from': 'error',
	'unicorn/prefer-includes': 'error',
	'unicorn/prefer-keyboard-event-key': 'error',
	'unicorn/prefer-logical-operator-over-ternary': 'error',
	'unicorn/prefer-math-trunc': 'error',
	'unicorn/prefer-modern-dom-apis': 'error',
	// We need to try this rule in the future.
	'unicorn/prefer-modern-math-apis': 'error',
	'unicorn/prefer-module': 'off',
	// I don't understand why I need this rule.
	'unicorn/prefer-native-coercion-functions': 'off',
	'unicorn/prefer-negative-index': 'error',
	// TypeScript does not support this protocol yet.
	'unicorn/prefer-node-protocol': 'off',
	'unicorn/prefer-number-properties': 'error',
	// It's very annoying right now for me.
	'unicorn/prefer-object-from-entries': 'off',
	// The '@types/node' does not support this yet.
	'unicorn/prefer-json-parse-buffer': 'off',
	'unicorn/prefer-optional-catch-binding': 'error',
	'unicorn/prefer-prototype-methods': 'error',
	'unicorn/prefer-query-selector': 'error',
	'unicorn/prefer-reflect-apply': 'error',
	'unicorn/prefer-regexp-test': 'off',
	'unicorn/prefer-set-has': 'error',
	'unicorn/prefer-set-size': 'error',
	// The `spread` is faster for smaller arrays, while concat is faster on large arrays.
	'unicorn/prefer-spread': 'off',
	'unicorn/no-useless-switch-case': 'error',
	// Available in node.js 15+
	'unicorn/prefer-string-replace-all': 'off',
	'unicorn/prefer-string-slice': 'error',
	'unicorn/prefer-string-starts-ends-with': 'error',
	'unicorn/prefer-string-trim-start-end': 'error',
	'unicorn/prefer-switch': 'error',
	'unicorn/prefer-ternary': 'error',
	// Available in node.js 14+
	'unicorn/prefer-top-level-await': 'off',
	'unicorn/prefer-type-error': 'error',
	'unicorn/prevent-abbreviations': [
		'error',
		{
			allowList: { args: true },
		},
	],
	'unicorn/relative-url-style': ['error', 'always'],
	'unicorn/require-array-join-separator': 'error',
	'unicorn/require-number-to-fixed-digits-argument': 'error',
	'unicorn/require-post-message-target-origin': 'error',
	'unicorn/string-content': 'off',
	'unicorn/switch-case-braces': 'error',
	'unicorn/template-indent': 'error',
	'unicorn/text-encoding-identifier-case': 'error',
	'unicorn/throw-new-error': 'error',
};

module.exports = {
	...UNICORN_RULES,
};
